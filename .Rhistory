install.packages("grid")
source("http://bioconductor.org/biocLite.R")
biocLite("flowCore")
biocLite("flowViz")
biocLite("flowStats")
library("flowStats")
install.packages("readxl")
library("dplyr")
install.packages("dplyr")
install.packages("readxl")
library("readxl")
library("dplyr")
read_excel("~/Downloads/pool_with_counts_for_singleStrain_exp_in20genes.xlsx")
genes20 = read_excel("~/Downloads/pool_with_counts_for_singleStrain_exp_in20genes.xlsx")
colnames(genes20)
genes20[1,]
genes20[1,2:69]
typeof(genes20)
class(genes20)
??readxl
table(genes20$gene_sgd_id)
colnames(genes20)
filter(genes20, gene_sgd_id == "YER043C")
grep("Ir1", colnames(genes20))
colnames(genes20)[grep("Ir1", colnames(genes20))]
colnames(genes20)[grep("Ir1", colnames(genes20))][1:5]
genes20[1,c(colnames(genes20)[grep("Ir1", colnames(genes20))][1:5])]
filter(genes20, gene_sgd_id == "YER043C")[,c(colnames(genes20)[grep("Ir1", colnames(genes20))][1:5])]
getwd()
setwd("/Users/annamcgeachy//Google Drive/Sidrauski collaboration/tmisrib mrna analysis 20150107/")
#import expr table (use pre filtered list from multi factor)
CSdata_tmisrib_mRNA = read.delim("expression table tm isrib no pseudogenes or RNA genes mRNA cut 20150107.csv",
header=TRUE,
sep=",",
stringsAsFactors=FALSE,
row.names=1)
head(CSdata_tmisrib_mRNA)
CSdata_tmisrib_mRNA = CSdata_tmisrib_mRNA[,1:9]
head(CSdata_tmisrib_mRNA)
#import table of gene names --> already comes with gene data
human_xref= read.delim("xref_20150105.txt",
header=FALSE,
sep="\t",
stringsAsFactors=FALSE,
row.names=1)
head(human_xref, n=20)
#add gene names and desc to data
CSdata_tmisrib_mRNA[,"gene"]=human_xref[row.names(CSdata_tmisrib_mRNA),"V5"]
CSdata_tmisrib_mRNA[,"desc"]=human_xref[row.names(CSdata_tmisrib_mRNA),"V8"]
head(CSdata_tmisrib_mRNA)
#generate a list of gene names for genes with average mRNA expression >33 (changed to 33 to reflect what we do in multi factor)
CSdata_tmisrib_mRNA_cutoff = row.names(CSdata_tmisrib_mRNA[rowMeans(CSdata_tmisrib_mRNA[,2:9])>33, ])
head(CSdata_tmisrib_mRNA_cutoff)
#make data frames, assign conditions
tmisrib_mrna_condition =
factor(c("isrib", "isrib", "tm", "tm", "tmisrib", "tmisrib", "untr", "untr"),
levels=c("untr", "isrib", "tm", "tmisrib"))
tmisrib_mrna_condition
CSdata_tmisrib_mRNA = read.delim("expression table tm isrib no pseudogenes or RNA genes mRNA cut 20150107.csv",
header=TRUE,
sep=",",
stringsAsFactors=FALSE,
row.names=1)
?DeSeq
??DeSeq
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
read.delim("~/Downloads/pool_with_fracs.tsv", header = TRUE, stringsAsFactors = FALSE)
pools = read.delim("~/Downloads/pool_with_fracs.tsv", header = TRUE, stringsAsFactors = FALSE)
colnames(pools)
pools[1,]
table(pools$guide_id)
colnames(pools)
pools[1,]
?split
?strsplit
strsplit(pools[1,"guide_id"], split = "_")
strsplit(pools[1,"guide_id"], split = "_")[1]
strsplit(pools[1,"guide_id"], split = "_")[[1]]
install.packages("tidyr")
library("tidyr")
unnest(strsplit(pools[1,"guide_id"], split = "_"))
as.matrix(strsplit(pools[1,"guide_id"], split = "_"))
unlist(strsplit(pools[1,"guide_id"], split = "_"))
unlist(strsplit(pools[1,"guide_id"], split = "_"))[1]
?apply()
apply(pools, 1, function(x) unlist(strsplit(pools[x,"guide_id"], split = "_"))[1])
?function
gene_cutter = function(x){unlist(strsplit(pools[x,"guide_id"], split = "_"))[1]}
apply(pools, 1, gene_cutter)
gene_cutter(1)
for(j in 1:nrow(pools)){
unlist(strsplit(pools[j,"guide_id"], split = "_"))[1]
}
for(j in 1:nrow(pools)){
unlist(strsplit(pools[j,"guide_id"], split = "_"))[1]
return()
}
matrix("0", nrow = nrow(pools))
emptyset = matrix("0", nrow = nrow(pools))
for(j in 1:nrow(pools)){
emptyset[j,]=unlist(strsplit(pools[j,"guide_id"], split = "_"))[1]
}
head(emptyset)
head(table(emptyset))
nrow(table(emptyset))
as.data.frame(table(emptyset))
gene_counts = as.data.frame(table(emptyset))
head(gene_counts)
?sort
?order
order(gene_counts)
order(gene_counts$Freq)
gene_counts[order(gene_counts$Freq),]
gene_counts = gene_counts[order(gene_counts$Freq),]
hist(gene_counts$Freq)
hist(gene_counts$Freq, breaks = 10)
hist(gene_counts$Freq, breaks = 100)
filter(gene_counts, Freq>=1000)
head(baby)
getwd()
setwd("~/Ancestry/")
snp_data = read.delim("AncestryDNA-trim.txt", header=TRUE, stringsAsFactors = FALSE)
head(snp_data)
library("dplyr")
baby = head(snp_data, n=20)
baby
head(baby)
